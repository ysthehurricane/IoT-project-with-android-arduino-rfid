{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/serial/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AACxE,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAyDjB,0BAAiB;;;;IAE3C;;;;;OAKG;;;;;;;IAKH,kCAAiB;;;;;;cAAC,OAAiC,IAAkB,MAAM,CAAC,EAAE;IAE9E;;;;;OAKG;;;;;;;IAEH,qBAAI;;;;;;cAAC,OAA0B,IAAkB,MAAM,CAAC,EAAE;IAE1D;;;;;OAKG;;;;;;;IAEH,sBAAK;;;;;;cAAC,IAAS,IAAkB,MAAM,CAAC,EAAE;IAE1C;;;;;OAKG;;;;;;;IAEH,yBAAQ;;;;;;cAAC,IAAS,IAAkB,MAAM,CAAC,EAAE;IAE7C;;;;OAIG;;;;;;IAEH,qBAAI;;;;;kBAAmB,MAAM,CAAC,EAAE;IAEhC;;;;OAIG;;;;;;IAIH,qCAAoB;;;;;kBAAsB,MAAM,CAAC,EAAE;IAEnD;;;;OAIG;;;;;;IAEH,sBAAK;;;;;kBAAmB,MAAM,CAAC,EAAE;;gBAlElC,UAAU;;;QASR,OAAO,CAAC;YACP,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;mDAC4E;;QAQ7E,OAAO,EAAE;;;;sCACgD;;QAQzD,OAAO,EAAE;;;;uCACgC;;QAQzC,OAAO,EAAE;;;;0CACmC;;QAO5C,OAAO,EAAE;;;;sCACsB;;QAO/B,OAAO,CAAC;YACP,UAAU,EAAE,IAAI;SACjB,CAAC;;;wCACsB,UAAU;sDAAiB;;QAOlD,OAAO,EAAE;;;;uCACuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAjEtB,MAAM;QARlB,MAAM,CAAC;YACN,UAAU,EAAE,QAAQ;YACpB,MAAM,EAAE,eAAe;YACvB,SAAS,EAAE,QAAQ;YACnB,IAAI,EAAE,4CAA4C;YAClD,SAAS,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC;SACjC,CAAC;OAEW,MAAM,EAmElB;iBA9HD;EA2D4B,iBAAiB;SAAhC,MAAM","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\ndeclare var serial: any;\n\nexport interface SerialPermissionOptions {\n  vid: string;\n  pid: string;\n  driver: string;\n}\n\nexport interface SerialOpenOptions {\n  baudRate: number;\n  dataBits: number;\n  stopBits: number;\n  parity: number;\n  dtr: boolean;\n  rts: boolean;\n  sleepOnPause: boolean;\n}\n\n/**\n * @name Serial\n * @description\n * This plugin provides functions for working with Serial connections\n *\n * @usage\n * ```typescript\n * import { Serial } from '@ionic-native/serial';\n *\n * constructor(private serial: Serial) { }\n *\n * ...\n *\n * this.serial.requestPermission().then(() => {\n *   this.serial.open({\n *     baudRate: 9800,\n *     dataBits: 4,\n *     stopBits: 1,\n *     parity: 0,\n *     dtr: true,\n *     rts: true,\n *     sleepOnPause: false\n *   }).then(() => {\n *     console.log('Serial connection opened');\n *   });\n * }).catch((error: any) => console.log(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'Serial',\n  plugin: 'cordovarduino',\n  pluginRef: 'serial',\n  repo: 'https://github.com/xseignard/cordovarduino',\n  platforms: ['Android', 'Ubuntu']\n})\n@Injectable()\nexport class Serial extends IonicNativePlugin {\n\n  /**\n   * Request permission to connect to a serial device\n   *\n   * @param options {SerialPermissionOptions} Options used to request serial permissions for an unknown device\n   * @return {Promise<any>} Returns a promise that resolves when permissions are granted\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  requestPermission(options?: SerialPermissionOptions): Promise<any> { return; }\n\n  /**\n   * Open connection to a serial device\n   *\n   * @param options {SerialOpenOptions} Options used to open serial connection\n   * @return {Promise<any>} Returns a promise that resolves when the serial connection is opened\n   */\n  @Cordova()\n  open(options: SerialOpenOptions): Promise<any> { return; }\n\n  /**\n   * Write to a serial connection\n   *\n   * @param data {any} data to write to the serial connection\n   * @return {Promise<any>} Returns a promise that resolves when the write is complete\n   */\n  @Cordova()\n  write(data: any): Promise<any> { return; }\n\n  /**\n   * Write hex to a serial connection\n   *\n   * @param data {any} data to write to the serial connection\n   * @return {Promise<any>} Returns a promise that resolves when the write is complete\n   */\n  @Cordova()\n  writeHex(data: any): Promise<any> { return; }\n\n  /**\n   * Read from a serial connection\n   *\n   * @return {Promise<any>} Returns a promise that resolves with data read from the serial connection\n   */\n  @Cordova()\n  read(): Promise<any> { return; }\n\n  /**\n   * Watch the incoming data from the serial connection. Clear the watch by unsubscribing from the observable\n   *\n   * @returns {Observable<any>} Observable returns an observable that you can subscribe to\n   */\n  @Cordova({\n    observable: true\n  })\n  registerReadCallback(): Observable<any> { return; }\n\n  /**\n   * Close the serial connection\n   *\n   * @return {Promise<any>} Returns a promise that resolves when the serial connection is closed\n   */\n  @Cordova()\n  close(): Promise<any> { return; }\n\n}\n"]}